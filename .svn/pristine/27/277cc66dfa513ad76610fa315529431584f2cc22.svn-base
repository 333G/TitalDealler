using System;
using System.Collections;
using System.Collections.Generic;
using System.ComponentModel;
using System.Data;
using System.Drawing;
using System.IO;
using System.Linq;
using System.Text;
using System.Threading.Tasks;
using System.Windows.Forms;
using Word = Microsoft.Office.Interop.Word;
using ToolGood.Words;
using System.Text.RegularExpressions;

namespace 标题处理
{
    public partial class Form1 : Form
    {
        public static int time_count = 0;
        public Form1()
        {
            InitializeComponent();
        }

        private void OneKeyClearEnWords_Click(object sender, EventArgs e)
        {

        }

        private void OneKeyClearNum_Click(object sender, EventArgs e)
        {
            string InsertStr = MaintextBox.Text;
            string ChangedStr = Regex.Replace(InsertStr, @"\d", "");
            //StringSearch iwords = new StringSearch();
            //string keywords = "0|1|2|3|4|5|6|7|8|9";
            //iwords.SetKeywords(keywords.Split('|'));
            //string ChangedStr = iwords.Replace(InsertStr, ' ');
            ChangedStr = ChangedStr.Replace("\r\n", "");
            MaintextBox.Text = FormatStr(ChangedStr);
        }

        private void OneKeyClearPunctuation_Click(object sender, EventArgs e)
        {
            string InsertStr = MaintextBox.Text;
            StringSearch iwords = new StringSearch();
            string keywords = "!|@|#|$|%|^|&|*|(|)|、|“|”|+|……|！|#|￥|（|）| |";
            iwords.SetKeywords(keywords.Split('|'));
            string ChangedStr = iwords.Replace(InsertStr, ' ');
            ChangedStr = ChangedStr.Replace("\r\n", "");
            ChangedStr = ChangedStr.Replace(" ", "");
            MaintextBox.Text = FormatStr(ChangedStr);
        }

        private void OneKeyAddKeyWords_Click(object sender, EventArgs e)
        {
            string keyword_1 = KeyWordsOne.Text;
            string keyword_2 = KeyWordsTwo.Text;
            string keyword_3 = KeyWordThree.Text;
        }

        private void CheckHistoryWords_Click(object sender, EventArgs e)
        {
            HistoryWordsForm historywordsform = new HistoryWordsForm();
           // this.Visible = false;
            historywordsform.ShowDialog();
           // this.Visible = true;
        }

        private void checkBox3_CheckedChanged(object sender, EventArgs e)
        {

        }

        private void DelectMoreThen30_Click(object sender, EventArgs e)
        {

        }

        private void Insert_Click(object sender, EventArgs e)//在这里写导入文件的代码
        {
            OpenFileDialog Opennewfile = new OpenFileDialog();
            Opennewfile.Filter= "文本文件(*.txt)|*.txt|Word文档(*.doc;*.docx)|*.doc;*.docx";
            string InsertStr;
            if (Opennewfile.ShowDialog() == DialogResult.OK)
            {
                //获取用户选择文件的路径
                string extension = Path.GetFullPath(Opennewfile.FileName);
                string doctype = extension.Substring(extension.Length - 4, 4);
                //r如果读取的是txt文件
                if (doctype==".txt"||doctype==".TXT")
                {
                    StreamReader sr = new StreamReader(extension, Encoding.GetEncoding("gb2312"));
                    InsertStr = sr.ReadLine();
                    sr.Close();
                }
                else//剩下的word文件
                {
                    try
                    {
                        Word.Application WordApp = new Word.Application();
                        Word.Document doc = null;
                        object unknow = Type.Missing;
                        WordApp.Visible = false;
                        object file = extension;
                        doc = WordApp.Documents.Open(ref file,
                             ref unknow, ref unknow, ref unknow, ref unknow,
                             ref unknow, ref unknow, ref unknow, ref unknow,
                             ref unknow, ref unknow, ref unknow, ref unknow,
                             ref unknow, ref unknow, ref unknow);
                        InsertStr = doc.Content.Text;
                        doc.Close(ref unknow, ref unknow, ref unknow);
                        WordApp.Quit();
                    }
                    catch(Exception ex)
                    {
                        InsertStr = "出现错误！请检查文件。" + ex;
                        MaintextBox.Text = InsertStr;
                    }
                }
                MaintextBox.Text = FormatStr(InsertStr);
            }
        }

        private void ClearAll_Click(object sender, EventArgs e)
        {
            MaintextBox.Text = null;
        }

        private void OneKeyCopy_Click(object sender, EventArgs e)
        {
            try
            {
                Clipboard.SetDataObject(MaintextBox.Text);
                toolTip1.Show("复制到粘贴板成功!", MaintextBox);
            }
            catch(Exception ex)
            {
                ToolTip tooltip = new ToolTip();
                tooltip.Show("出现错误，请重试" + ex, MaintextBox);

            }
        }
        private void Hidetooltip(object sender, EventArgs e)
        {
           toolTip1.Hide(MaintextBox);
        }
        private void OneKeyReplace_Click(object sender, EventArgs e)
        {

        }

        private void DirtyWordsBase_Click(object sender, EventArgs e)
        {
            WordsBaseForm wordsbasefrom = new WordsBaseForm();
           // this.Visible=false;
            wordsbasefrom.ShowDialog();
           // this.Visible = true;
        }

        private void DeleteDirtyWordsBase_Click(object sender, EventArgs e)
        {

        }
        //private void TextChange(object sender, EventArgs e)
        //{
        //    string str = MaintextBox.Text;
        //    MaintextBox.Text= FormatStr(str);
        //}

        private string FormatStr(string InsertStr)
        {
            string FormattedStr;
            if (InsertStr.Length > 30)
            {
                decimal linecount = Math.Ceiling(Convert.ToDecimal(InsertStr.Length) / 30);//计算需要多少行
                string[] line = new string[Convert.ToInt32(linecount)];
                for (int i = 0; i < linecount; i++)
                {
                    if ((i + 1) * 30 < InsertStr.Length)//防止溢出
                    {
                        line[i] = InsertStr.Substring(i * 30, 30);
                    }
                    else
                    {
                        line[i] = InsertStr.Substring(i * 30, InsertStr.Length - i * 30);
                    }
                }
                string FinalStr = line[0];
                for (int i = 1; i < line.Count(); i++)
                {
                    FinalStr += "\r\n" + line[i];
                }
                FormattedStr = FinalStr;
            }
            else
            {
                FormattedStr = InsertStr;
            }
            return FormattedStr;
        }
    }
}
